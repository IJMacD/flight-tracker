{"version":3,"sources":["util.js","ATCDisplay.jsx","App.js","serviceWorker.js","index.js"],"names":["getPosition","bounds","longitude","latitude","x","min_lon","max_lon","width","y","min_lat","max_lat","height","ATCDisplay","aircraft","history","myLocation","coastline","ref","React","useRef","bgRef","useEffect","current","ctx","getContext","clearRect","fillStyle","beginPath","arc","Math","PI","fill","strokeStyle","craft","θ","true_track","dx1","sin","dy1","cos","dx","velocity","dy","lineWidth","moveTo","lineTo","stroke","hist","icao24","first","h","fillText","callsign","metres","geo_altitude","String","padStart","vertical_rate","save","translate","rotate","restore","features","f","geometry","coordinates","coord","style","position","map_bounds","App","props","state","update","a","getAircraft","updateHistory","setState","this","timeout","setInterval","navigator","geolocation","getCurrentPosition","p","coords","default","clearInterval","className","Component","fetch","r","json","d","headers","states","map","s","zip","keys","values","o","i","length","out","prev","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.103f7c56.chunk.js","sourcesContent":["export function getPosition (bounds, longitude, latitude) {\r\n  return {\r\n    x: (longitude - bounds.min_lon)/(bounds.max_lon - bounds.min_lon) * bounds.width,\r\n    y: (latitude - bounds.min_lat)/(bounds.max_lat - bounds.min_lat) * bounds.height,\r\n  }\r\n}","import React from 'react';\r\nimport { getPosition } from './util';\r\n\r\nconst bounds = {\r\n  min_lon: 113.8,\r\n  min_lat: 22.1,\r\n  max_lon: 114.5,\r\n  max_lat: 22.6,\r\n  width: 1086,\r\n  height: 842,\r\n};\r\n\r\nexport default function ATCDisplay ({ aircraft, history, myLocation, coastline }) {\r\n    /** @type {React.MutableRefObject<HTMLCanvasElement>} */\r\n    const ref = React.useRef();\r\n    /** @type {React.MutableRefObject<HTMLCanvasElement>} */\r\n    const bgRef = React.useRef();\r\n\r\n    React.useEffect(() => {\r\n        if (ref.current) {\r\n            const ctx = ref.current.getContext(\"2d\");\r\n            ctx.clearRect(0, 0, bounds.width, bounds.height);\r\n\r\n            if (myLocation) {\r\n                const { x, y } = getPosition(bounds, myLocation.longitude, myLocation.latitude);\r\n                ctx.fillStyle = \"#F00\";\r\n                ctx.beginPath();\r\n                ctx.arc(x, bounds.height - y, 1, 0, Math.PI * 2);\r\n                ctx.fill();\r\n            }\r\n\r\n            ctx.strokeStyle = \"#C0F0C0\";\r\n            ctx.fillStyle = \"#F0F0C0\";\r\n\r\n            for (const craft of aircraft) {\r\n                const { x, y } = getPosition(bounds, craft.longitude, craft.latitude);\r\n                const θ = toRadians(craft.true_track);\r\n\r\n                const dx1 = Math.sin(θ) * 5;\r\n                const dy1 = Math.cos(θ) * 5;\r\n                const dx = Math.sin(θ) * craft.velocity * 0.1;\r\n                const dy = Math.cos(θ) * craft.velocity * 0.1;\r\n                ctx.lineWidth = 1;\r\n                ctx.beginPath();\r\n                ctx.moveTo(x + dx1, bounds.height - y - dy1);\r\n                ctx.lineTo(x + dx, bounds.height - y - dy);\r\n                ctx.stroke();\r\n\r\n                const hist = history[craft.icao24];\r\n                if (hist) {\r\n                    ctx.lineWidth = 0.5;\r\n                    ctx.beginPath();\r\n                    let first = true;\r\n                    for (const h of hist) {\r\n                        const { x, y } = getPosition(bounds, h.longitude, h.latitude);\r\n                        first ? ctx.moveTo(x,bounds.height-y) : ctx.lineTo(x,bounds.height-y);\r\n                        first = false;\r\n                    }\r\n                    ctx.stroke();\r\n                }\r\n\r\n                ctx.fillText(craft.callsign, x + 10, bounds.height - y);\r\n                ctx.fillText(`${metresToFlightLevel(craft.geo_altitude)}${craft.vertical_rate > 2.5 ? \"🡩\" : craft.vertical_rate < -2.5 ? \"🡫\" : \"=\" } ${mpsToKnotsDisplay(craft.velocity)}`, x + 10, bounds.height - y + 12);\r\n                ctx.save();\r\n                ctx.translate(x, bounds.height-y);\r\n                ctx.rotate(θ);\r\n                ctx.fillText(\"🛧️\", -5, 4);\r\n                ctx.restore();\r\n            }\r\n        }\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        if (bgRef.current && coastline) {\r\n            const ctx = bgRef.current.getContext(\"2d\");\r\n            ctx.strokeStyle = \"#80C080\";\r\n            for (const f of coastline.features) {\r\n                ctx.beginPath();\r\n                let first = true;\r\n                for (const coord of f.geometry.coordinates) {\r\n                    const { x, y } = getPosition(bounds, coord[0], coord[1]);\r\n                    first ? ctx.moveTo(x, bounds.height - y) : ctx.lineTo(x, bounds.height - y);\r\n                    first = false;\r\n                }\r\n                ctx.stroke();\r\n            }\r\n        }\r\n    }, [coastline]);\r\n\r\n    return <div style={{ position: \"relative\" }}>\r\n        <canvas ref={bgRef} width={bounds.width} height={bounds.height} style={{ position: \"absolute\" }} />\r\n        <canvas ref={ref} width={bounds.width} height={bounds.height} />\r\n    </div>\r\n}\r\n\r\nfunction metresToFlightLevel (metres) {\r\n    return String((metres * 0.0328084)|0).padStart(3, \"0\");\r\n}\r\n\r\nfunction mpsToKnotsDisplay (mps) {\r\n    return (mps * 0.194384)|0;\r\n}\r\n\r\nfunction toRadians (deg) {\r\n    return deg * Math.PI / 180;\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport ATCDisplay from './ATCDisplay';\r\nimport { getPosition } from './util';\r\n\r\nconst map_bounds = {\r\n  min_lon: 113.8,\r\n  min_lat: 22.1,\r\n  max_lon: 114.5,\r\n  max_lat: 22.6,\r\n  width: 543,\r\n  height: 421,\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      aircraft: [],\r\n      history: {},\r\n    };\r\n  }\r\n\r\n  async componentDidMount () {\r\n    const update = async () => {\r\n      const aircraft = await getAircraft(map_bounds);\r\n      const history = updateHistory(this.state.history, aircraft);\r\n      this.setState({ aircraft, history });\r\n    }\r\n    update();\r\n    this.timeout = setInterval(update, 10 * 1000);\r\n\r\n    navigator.geolocation.getCurrentPosition(p => {\r\n      this.setState({ myLocation: p.coords });\r\n    });\r\n\r\n    const coastline = (await import(\"./coastline.json\")).default;\r\n    this.setState({ coastline });\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    clearInterval(this.timeout);\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"App\">\r\n        {/* <div style={{ width: map_bounds.width, height: map_bounds.height, backgroundImage: `url(${require('./map.png')})`, position: \"relative\", margin: \"0 auto\" }}>\r\n          { this.state.aircraft.map(a => {\r\n            const { x: left, y: bottom } = getPosition(map_bounds, a.longitude, a.latitude);\r\n            return <div key={a.icao24} style={{ position: \"absolute\", left, bottom, transform: `rotate(${a.true_track}deg)` }}>🛧️</div>\r\n          })}\r\n        </div>\r\n        <div style={{ width: map_bounds.width, height: 200, position: \"relative\", borderBottom: \"1px solid #CCC\", margin: \"0 auto\" }}>\r\n          { this.state.aircraft.map(a => {\r\n            const { x: left } = getPosition(map_bounds, a.longitude, a.latitude);\r\n            const bottom = (a.geo_altitude || a.baro_altitude) / 50;\r\n            return <div key={a.icao24} style={{ position: \"absolute\", left, bottom, transform: a.true_track > 180 ? `scale(-1,1)` : \"\" }}>\r\n              {a.vertical_rate > 2.5 ? \"🛫︎\" : a.vertical_rate < -2.5 ? \"🛬︎\" : \"✈︎\" }\r\n            </div>\r\n          })}\r\n        </div> */}\r\n        <ATCDisplay\r\n          aircraft={this.state.aircraft}\r\n          history={this.state.history}\r\n          myLocation={this.state.myLocation}\r\n          coastline={this.state.coastline}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\nasync function getAircraft (bounds) {\r\n  const r = await fetch(`https://opensky-network.org/api/states/all?lamin=${bounds.min_lat}&lomin=${bounds.min_lon}&lamax=${bounds.max_lat}&lomax=${bounds.max_lon}`);\r\n  const d = await r.json();\r\n  const headers = [\"icao24\", \"callsign\", \"origin_country\", \"time_position\", \"last_contact\", \"longitude\", \"latitude\", \"baro_altitude\", \"on_ground\", \"velocity\", \"true_track\", \"vertical_rate\", \"sensors\", \"geo_altitude\", \"squawk\", \"spi\", \"position_source\"];\r\n  return d.states.map(s => zip(headers, s));\r\n}\r\n\r\nfunction zip (keys, values) {\r\n  const o = {};\r\n  for (let i = 0; i < keys.length && i < values.length; i++) {\r\n    o[keys[i]] = values[i];\r\n  }\r\n  return o;\r\n}\r\n\r\nfunction updateHistory (history, aircraft) {\r\n  const out = {};\r\n\r\n  for (const craft of aircraft) {\r\n    const prev = history[craft.icao24] || [];\r\n    const { longitude, latitude } = craft;\r\n    out[craft.icao24] = [ ...prev, { longitude, latitude } ];\r\n  }\r\n\r\n  return out;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}