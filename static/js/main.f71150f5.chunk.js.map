{"version":3,"sources":["map_outline.png","util.js","ATCDisplay.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","getPosition","bounds","longitude","latitude","x","min_lon","max_lon","width","y","min_lat","max_lat","height","ATCDisplay","aircraft","myLocation","ref","React","useRef","useEffect","current","ctx","getContext","clearRect","fillStyle","beginPath","arc","Math","PI","fill","strokeStyle","craft","Œ∏","true_track","dx1","sin","dy1","cos","dx","velocity","dy","moveTo","lineTo","stroke","fillText","callsign","metres","geo_altitude","String","padStart","vertical_rate","save","translate","rotate","restore","style","backgroundImage","require","backgroundSize","map_bounds","App","props","state","update","a","getAircraft","setState","this","timeout","setInterval","navigator","geolocation","getCurrentPosition","p","coords","clearInterval","className","Component","fetch","r","json","d","headers","states","map","s","zip","keys","values","o","i","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f71150f5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map_outline.d32ef63b.png\";","export function getPosition (bounds, longitude, latitude) {\r\n  return {\r\n    x: (longitude - bounds.min_lon)/(bounds.max_lon - bounds.min_lon) * bounds.width,\r\n    y: (latitude - bounds.min_lat)/(bounds.max_lat - bounds.min_lat) * bounds.height,\r\n  }\r\n}","import React from 'react';\r\nimport { getPosition } from './util';\r\n\r\nconst bounds = {\r\n  min_lon: 113.8,\r\n  min_lat: 22.1,\r\n  max_lon: 114.5,\r\n  max_lat: 22.6,\r\n  width: 1000,\r\n  height: 800,\r\n};\r\n\r\nexport default function ATCDisplay ({ aircraft, myLocation }) {\r\n    /** @type {React.MutableRefObject<HTMLCanvasElement>} */\r\n    const ref = React.useRef();\r\n    React.useEffect(() => {\r\n        if (ref.current) {\r\n            const ctx = ref.current.getContext(\"2d\");\r\n            ctx.clearRect(0, 0, bounds.width, bounds.height);\r\n\r\n            if (myLocation) {\r\n                const { x, y } = getPosition(bounds, myLocation.longitude, myLocation.latitude);\r\n                ctx.fillStyle = \"#F00\";\r\n                ctx.beginPath();\r\n                ctx.arc(x, bounds.height - y, 1, 0, Math.PI * 2);\r\n                ctx.fill();\r\n            }\r\n\r\n            ctx.strokeStyle = \"#C0F0C0\";\r\n            ctx.fillStyle = \"#F0F0C0\";\r\n\r\n            for (const craft of aircraft) {\r\n                const { x, y } = getPosition(bounds, craft.longitude, craft.latitude);\r\n                const Œ∏ = toRadians(craft.true_track);\r\n                const dx1 = Math.sin(Œ∏) * 5;\r\n                const dy1 = Math.cos(Œ∏) * 5;\r\n                const dx = Math.sin(Œ∏) * craft.velocity * 0.1;\r\n                const dy = Math.cos(Œ∏) * craft.velocity * 0.1;\r\n                ctx.beginPath();\r\n                ctx.moveTo(x + dx1, bounds.height - y - dy1);\r\n                ctx.lineTo(x + dx, bounds.height - y - dy);\r\n                ctx.stroke();\r\n                ctx.fillText(craft.callsign, x + 10, bounds.height - y);\r\n                ctx.fillText(`${metresToFlightLevel(craft.geo_altitude)} ${craft.vertical_rate > 2.5 ? \"ü°©\" : craft.vertical_rate < -2.5 ? \"ü°´\" : \"=\" }${mpsToKnotsDisplay(craft.velocity)}`, x + 10, bounds.height - y + 12);\r\n                ctx.save();\r\n                ctx.translate(x, bounds.height-y);\r\n                ctx.rotate(Œ∏);\r\n                ctx.fillText(\"üõßÔ∏è\", -5, 4);\r\n                ctx.restore();\r\n            }\r\n        }\r\n    });\r\n\r\n    return <canvas ref={ref} width={bounds.width} height={bounds.height} style={{ backgroundImage: `url(${require('./map_outline.png')})`, backgroundSize: \"100%\" }} />\r\n}\r\n\r\nfunction metresToFlightLevel (metres) {\r\n    return String((metres * 0.0328084)|0).padStart(3, \"0\");\r\n}\r\n\r\nfunction mpsToKnotsDisplay (mps) {\r\n    return (mps * 0.194384)|0;\r\n}\r\n\r\nfunction toRadians (deg) {\r\n    return deg * Math.PI / 180;\r\n}","import React from 'react';\nimport './App.css';\nimport ATCDisplay from './ATCDisplay';\nimport { getPosition } from './util';\n\nconst map_bounds = {\n  min_lon: 113.8,\n  min_lat: 22.1,\n  max_lon: 114.5,\n  max_lat: 22.6,\n  width: 543,\n  height: 421,\n};\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      aircraft: [],\n    };\n  }\n\n  componentDidMount () {\n    const update = async () => {\n      const aircraft = await getAircraft(map_bounds);\n      this.setState({ aircraft });\n    }\n    update();\n    this.timeout = setInterval(update, 10 * 1000);\n\n    navigator.geolocation.getCurrentPosition(p => {\n      this.setState({ myLocation: p.coords });\n    });\n  }\n\n  componentWillUnmount () {\n    clearInterval(this.timeout);\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        {/* <div style={{ width: map_bounds.width, height: map_bounds.height, backgroundImage: `url(${require('./map.png')})`, position: \"relative\", margin: \"0 auto\" }}>\n          { this.state.aircraft.map(a => {\n            const { x: left, y: bottom } = getPosition(map_bounds, a.longitude, a.latitude);\n            return <div key={a.icao24} style={{ position: \"absolute\", left, bottom, transform: `rotate(${a.true_track}deg)` }}>üõßÔ∏è</div>\n          })}\n        </div>\n        <div style={{ width: map_bounds.width, height: 200, position: \"relative\", borderBottom: \"1px solid #CCC\", margin: \"0 auto\" }}>\n          { this.state.aircraft.map(a => {\n            const { x: left } = getPosition(map_bounds, a.longitude, a.latitude);\n            const bottom = (a.geo_altitude || a.baro_altitude) / 50;\n            return <div key={a.icao24} style={{ position: \"absolute\", left, bottom, transform: a.true_track > 180 ? `scale(-1,1)` : \"\" }}>\n              {a.vertical_rate > 2.5 ? \"üõ´Ô∏é\" : a.vertical_rate < -2.5 ? \"üõ¨Ô∏é\" : \"‚úàÔ∏é\" }\n            </div>\n          })}\n        </div> */}\n        <ATCDisplay aircraft={this.state.aircraft} myLocation={this.state.myLocation} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nasync function getAircraft (bounds) {\n  const r = await fetch(`https://opensky-network.org/api/states/all?lamin=${bounds.min_lat}&lomin=${bounds.min_lon}&lamax=${bounds.max_lat}&lomax=${bounds.max_lon}`);\n  const d = await r.json();\n  const headers = [\"icao24\", \"callsign\", \"origin_country\", \"time_position\", \"last_contact\", \"longitude\", \"latitude\", \"baro_altitude\", \"on_ground\", \"velocity\", \"true_track\", \"vertical_rate\", \"sensors\", \"geo_altitude\", \"squawk\", \"spi\", \"position_source\"];\n  return d.states.map(s => zip(headers, s));\n}\n\nfunction zip (keys, values) {\n  const o = {};\n  for (let i = 0; i < keys.length && i < values.length; i++) {\n    o[keys[i]] = values[i];\n  }\n  return o;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}